(() => {
    const originalNow = Date.now;
    const start = originalNow();
    let latestStatus = "üîÑ ƒêang kh·ªüi ƒë·ªông...";
    let countdownText = "‚è≥ Ch∆∞a b·∫•m n√∫t";
    let foundCodeText = "";

    Date.now = () => start + (originalNow() - start) * 250;

    const originalSetTimeout = window.setTimeout;
    window.setTimeout = (cb, delay, ...args) => originalSetTimeout(cb, delay / 5 + Math.random() * 50, ...args);

    const originalSetInterval = window.setInterval;
    window.setInterval = (cb, delay, ...args) => originalSetInterval(cb, delay / 5 + Math.random() * 50, ...args);

    const overlay = document.createElement("div");
    overlay.id = "konmeo-overlay";
    overlay.style.position = "fixed";
    overlay.style.top = "0";
    overlay.style.left = "0";
    overlay.style.width = "100vw";
    overlay.style.height = "100vh";
    overlay.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
    overlay.style.color = "white";
    overlay.style.fontFamily = "monospace";
    overlay.style.zIndex = "999999";
    overlay.style.display = "flex";
    overlay.style.flexDirection = "column";
    overlay.style.justifyContent = "center";
    overlay.style.alignItems = "center";

    overlay.innerHTML = `
        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;">
            <img src="https://raw.githubusercontent.com/Konmeo22132-alt/Konmeo22132./refs/heads/main/1338063610412400660.webp" alt="Konmeo Hub" style="width: 48px; height: 48px; border-radius: 10px;">
            <div style="font-size: 24px; font-weight: bold;">Konmeo Hub | Bypass yeumoney</div>
        </div>
        <div id="konmeo-countdown" style="font-size: 18px; margin-bottom: 8px;">${countdownText}</div>
        <div id="konmeo-status" style="font-size: 16px; color: lightgreen;">Status: ${latestStatus}</div>
        <div id="konmeo-foundcode" style="font-size: 16px; margin-top: 8px; color: #ff66cc;">${foundCodeText}</div>
        <pre style="color: orange; font-size: 13px; font-weight: bold; margin-top: 16px;">
Discord: @konmeo22132 | discord.gg/huneipa
YouTube: https://youtube.com/@huneee205
        </pre>
    `;
    document.body.appendChild(overlay);

    const updateOverlay = () => {
        document.getElementById("konmeo-countdown").textContent = countdownText;
        document.getElementById("konmeo-status").textContent = "Status: " + latestStatus;
        document.getElementById("konmeo-foundcode").textContent = foundCodeText ? "M√£: " + foundCodeText : "";
    };

    const delay = ms => new Promise(res => setTimeout(res, ms));
    let foundCode = false;

    async function waitForElement(selector, timeout = 10000) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeout) {
            const el = document.querySelector(selector);
            if (el) return el;
            await delay(500);
        }
        return null;
    }

    async function autoRun() {
        const scrollStep = 100;
        const scrollDelay = 1000;

        latestStatus = "üö® ƒêang k√©o xu·ªëng, vui l√≤ng kh√¥ng can thi·ªáp ƒë·ªÉ tr√°nh l·ªói";
        updateOverlay();

        while (window.scrollY + window.innerHeight < document.body.scrollHeight - 10) {
            window.scrollBy(0, scrollStep);
            await delay(scrollDelay + Math.random() * 100);
        }

        latestStatus = "‚úÖ ƒê√£ k√©o xu·ªëng cu·ªëi trang";
        updateOverlay();
        await delay(1000);

        const layMaBtn = await waitForElement("#layma_me_vuatraffic");
        if (layMaBtn) {
            layMaBtn.click();
            latestStatus = "‚úÖ ƒê√£ click n√∫t 'L·∫§Y M√É'";
            updateOverlay();
        } else {
            latestStatus = "‚ùå Kh√¥ng t√¨m th·∫•y n√∫t 'L·∫§Y M√É'";
            updateOverlay();
            return;
        }

        await delay(15000);

        const findAndClick = async () => {
            if (foundCode) return;
            const btn = document.querySelector("#layma_me_vuatraffic.getcodebtn.cursor-pointer");

            if (btn && btn.textContent.includes("VUI L√íNG CLICK")) {
                latestStatus = "üîç Ph√°t hi·ªán y√™u c·∫ßu click. ƒê·ª£i 5s...";
                updateOverlay();
                await delay(5000);

                const validLinks = Array.from(document.querySelectorAll("a[href]")).filter(link => {
                    const href = link.getAttribute("href");
                    const rect = link.getBoundingClientRect();
                    return href && !href.includes("#") && rect.width > 0 && rect.height > 0;
                });

                if (validLinks.length > 0) {
                    validLinks[0].click();
                    latestStatus = "üîó ƒê√£ click v√†o link: " + validLinks[0].href;
                    updateOverlay();
                } else {
                    latestStatus = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link h·ª£p l·ªá.";
                    updateOverlay();
                }
            } else {
                const match = btn?.textContent.match(/\d+/);
                if (match) {
                    countdownText = `‚è≥ C√≤n ${match[0]} gi√¢y`;
                } else {
                    countdownText = "‚è≥ Ch∆∞a b·∫•m n√∫t";
                }
                latestStatus = "‚åö Ch∆∞a th·ªÉ click, ƒëang ƒë·ª£i...";
                updateOverlay();
                setTimeout(findAndClick, 5000);
            }
        };

        setInterval(() => {
            if (foundCode) return;
            const all = document.querySelectorAll("#layma_me_vuatraffic");
            all.forEach(span => {
                const txt = span.textContent.trim();
                if (/^\d{6}$/.test(txt)) {
                    foundCodeText = txt;
                    latestStatus = `‚ùó T√¨m th·∫•y m√£: ${txt}`;
                    updateOverlay();

                    navigator.clipboard.writeText(txt).then(() => {
                        console.log("[Konmeo Hub] ‚úî ƒê√£ copy m√£ th√†nh c√¥ng");
                    });
                    foundCode = true;
                }
            });
        }, 2000);

        findAndClick();
    }

    autoRun();
})();
